{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d8c5eaa2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-03T17:59:07.466756Z",
     "iopub.status.busy": "2025-07-03T17:59:07.466365Z",
     "iopub.status.idle": "2025-07-03T17:59:09.480679Z",
     "shell.execute_reply": "2025-07-03T17:59:09.479665Z"
    },
    "papermill": {
     "duration": 2.020474,
     "end_time": "2025-07-03T17:59:09.482101",
     "exception": false,
     "start_time": "2025-07-03T17:59:07.461627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2d602fb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:59:09.489993Z",
     "iopub.status.busy": "2025-07-03T17:59:09.489552Z",
     "iopub.status.idle": "2025-07-03T17:59:11.679536Z",
     "shell.execute_reply": "2025-07-03T17:59:11.678678Z"
    },
    "papermill": {
     "duration": 2.195586,
     "end_time": "2025-07-03T17:59:11.681140",
     "exception": false,
     "start_time": "2025-07-03T17:59:09.485554",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ✅ Import libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# ✅ Load data\n",
    "train_df = pd.read_csv('/kaggle/input/titanic/train.csv')\n",
    "test_df = pd.read_csv('/kaggle/input/titanic/test.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0b255ada",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:59:11.688600Z",
     "iopub.status.busy": "2025-07-03T17:59:11.688280Z",
     "iopub.status.idle": "2025-07-03T17:59:11.705099Z",
     "shell.execute_reply": "2025-07-03T17:59:11.704227Z"
    },
    "papermill": {
     "duration": 0.022358,
     "end_time": "2025-07-03T17:59:11.706680",
     "exception": false,
     "start_time": "2025-07-03T17:59:11.684322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ✅ Combine for consistent preprocessing\n",
    "test_passenger_ids = test_df['PassengerId'].copy()\n",
    "combined = pd.concat([train_df, test_df], sort=False)\n",
    "\n",
    "# (continue preprocessing...)\n",
    "\n",
    "# ✅ Split back to train/test\n",
    "train_df = combined[:len(train_df)]\n",
    "test_df = combined[len(train_df):].copy()\n",
    "test_df['PassengerId'] = test_passenger_ids  # Restore PassengerId"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "abc5f88a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:59:11.714564Z",
     "iopub.status.busy": "2025-07-03T17:59:11.713924Z",
     "iopub.status.idle": "2025-07-03T17:59:11.723759Z",
     "shell.execute_reply": "2025-07-03T17:59:11.722878Z"
    },
    "papermill": {
     "duration": 0.015464,
     "end_time": "2025-07-03T17:59:11.725374",
     "exception": false,
     "start_time": "2025-07-03T17:59:11.709910",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ✅ Fill missing values\n",
    "combined['Age'] = combined['Age'].fillna(combined['Age'].median())\n",
    "combined['Fare'] = combined['Fare'].fillna(combined['Fare'].median())\n",
    "combined['Embarked'] = combined['Embarked'].fillna(combined['Embarked'].mode()[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6bf80d9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:59:11.732685Z",
     "iopub.status.busy": "2025-07-03T17:59:11.732362Z",
     "iopub.status.idle": "2025-07-03T17:59:11.739358Z",
     "shell.execute_reply": "2025-07-03T17:59:11.738513Z"
    },
    "papermill": {
     "duration": 0.012273,
     "end_time": "2025-07-03T17:59:11.740734",
     "exception": false,
     "start_time": "2025-07-03T17:59:11.728461",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ✅ Encode categorical features\n",
    "combined['Sex'] = combined['Sex'].map({'male': 0, 'female': 1})\n",
    "combined['Embarked'] = combined['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "aaa50b0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:59:11.748014Z",
     "iopub.status.busy": "2025-07-03T17:59:11.747692Z",
     "iopub.status.idle": "2025-07-03T17:59:11.754470Z",
     "shell.execute_reply": "2025-07-03T17:59:11.753594Z"
    },
    "papermill": {
     "duration": 0.012061,
     "end_time": "2025-07-03T17:59:11.755883",
     "exception": false,
     "start_time": "2025-07-03T17:59:11.743822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ✅ Feature engineering\n",
    "combined['FamilySize'] = combined['SibSp'] + combined['Parch'] + 1\n",
    "combined['IsAlone'] = (combined['FamilySize'] == 1).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4fe1fc59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:59:11.762811Z",
     "iopub.status.busy": "2025-07-03T17:59:11.762510Z",
     "iopub.status.idle": "2025-07-03T17:59:11.767182Z",
     "shell.execute_reply": "2025-07-03T17:59:11.766353Z"
    },
    "papermill": {
     "duration": 0.009818,
     "end_time": "2025-07-03T17:59:11.768665",
     "exception": false,
     "start_time": "2025-07-03T17:59:11.758847",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# ✅ Split back to train/test\n",
    "train_df = combined[:len(train_df)]\n",
    "test_df = combined[len(train_df):]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c0178f98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:59:11.775602Z",
     "iopub.status.busy": "2025-07-03T17:59:11.775307Z",
     "iopub.status.idle": "2025-07-03T17:59:11.876615Z",
     "shell.execute_reply": "2025-07-03T17:59:11.875668Z"
    },
    "papermill": {
     "duration": 0.106586,
     "end_time": "2025-07-03T17:59:11.878234",
     "exception": false,
     "start_time": "2025-07-03T17:59:11.771648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# ✅ Select features\n",
    "features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'FamilySize', 'IsAlone']\n",
    "X = train_df[features]\n",
    "y = train_df['Survived']\n",
    "X_test = test_df[features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0c6986e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:59:11.885455Z",
     "iopub.status.busy": "2025-07-03T17:59:11.885129Z",
     "iopub.status.idle": "2025-07-03T17:59:11.892997Z",
     "shell.execute_reply": "2025-07-03T17:59:11.892125Z"
    },
    "papermill": {
     "duration": 0.013504,
     "end_time": "2025-07-03T17:59:11.894881",
     "exception": false,
     "start_time": "2025-07-03T17:59:11.881377",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ✅ Split training data\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "59f37d80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:59:11.902207Z",
     "iopub.status.busy": "2025-07-03T17:59:11.901836Z",
     "iopub.status.idle": "2025-07-03T17:59:12.081633Z",
     "shell.execute_reply": "2025-07-03T17:59:12.080719Z"
    },
    "papermill": {
     "duration": 0.185071,
     "end_time": "2025-07-03T17:59:12.083079",
     "exception": false,
     "start_time": "2025-07-03T17:59:11.898008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_depth=6, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(max_depth=6, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(max_depth=6, random_state=42)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ✅ Train model\n",
    "rf_model = RandomForestClassifier(n_estimators=100, max_depth=6, random_state=42)\n",
    "rf_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6310ce8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:59:12.090575Z",
     "iopub.status.busy": "2025-07-03T17:59:12.090283Z",
     "iopub.status.idle": "2025-07-03T17:59:12.116747Z",
     "shell.execute_reply": "2025-07-03T17:59:12.115622Z"
    },
    "papermill": {
     "duration": 0.03198,
     "end_time": "2025-07-03T17:59:12.118291",
     "exception": false,
     "start_time": "2025-07-03T17:59:12.086311",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation Accuracy: 0.7933\n"
     ]
    }
   ],
   "source": [
    "# ✅ Validation accuracy\n",
    "y_val_pred = rf_model.predict(X_val)\n",
    "val_acc = accuracy_score(y_val, y_val_pred)\n",
    "print(f\"Validation Accuracy: {val_acc:.4f}\")\n",
    "\n",
    "# ✅ Predict on test set\n",
    "test_preds = rf_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "282052ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-03T17:59:12.126122Z",
     "iopub.status.busy": "2025-07-03T17:59:12.125766Z",
     "iopub.status.idle": "2025-07-03T17:59:12.138560Z",
     "shell.execute_reply": "2025-07-03T17:59:12.137496Z"
    },
    "papermill": {
     "duration": 0.018636,
     "end_time": "2025-07-03T17:59:12.140186",
     "exception": false,
     "start_time": "2025-07-03T17:59:12.121550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Submission file saved!\n"
     ]
    }
   ],
   "source": [
    "# ✅ Prepare submission\n",
    "submission = pd.DataFrame({\n",
    "    'PassengerId': test_df['PassengerId'],\n",
    "    'Survived': test_preds\n",
    "})\n",
    "submission.to_csv('/kaggle/working/submission.csv', index=False)\n",
    "print(\"✅ Submission file saved!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59be5dba",
   "metadata": {
    "papermill": {
     "duration": 0.003332,
     "end_time": "2025-07-03T17:59:12.146765",
     "exception": false,
     "start_time": "2025-07-03T17:59:12.143433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 26502,
     "sourceId": 3136,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.396763,
   "end_time": "2025-07-03T17:59:12.870210",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-03T17:59:02.473447",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
